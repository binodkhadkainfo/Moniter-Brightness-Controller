import tkinter as tk
from tkinter import ttk
import subprocess

def get_current_brightness():
    try:
        output = subprocess.check_output(["ddcutil", "getvcp", "10"], stderr=subprocess.DEVNULL)
        for line in output.decode().splitlines():
            if "current value" in line:
                return int(line.split("current value = ")[1].split(",")[0])
    except:
        return 50  # fallback default

def set_brightness(val):
    brightness = int(float(val))  # Ensure val is converted to int properly
    subprocess.run(["ddcutil", "setvcp", "10", str(brightness)], stderr=subprocess.DEVNULL)
    update_brightness_label()

def update_brightness_label():
    brightness_label.config(text=f"{int(slider.get())}%")  # Show only percentage

def refresh_value():
    current = get_current_brightness()
    slider.set(current)
    update_brightness_label()

# GUI Setup
root = tk.Tk()
root.title("Monitor Brightness Control")
root.geometry("100x350")  # Adjusted for vertical slider, taller window
root.configure(bg="#040a0a")  # Dark background for mobile-like aesthetic
root.resizable(False, False)

# Style configuration
style = ttk.Style()

# Custom style for vertical slider to mimic mobile volume with circular slider
style.configure(
    "Vertical.TScale",
    background="#080807",
    troughcolor="#ffffff",
    sliderlength=20,  # Equal to sliderthickness for circular appearance
    sliderthickness=20,  # Equal to sliderlength for circular appearance
    sliderrelief="flat",  # No relief to avoid square edges
    borderwidth=0,  # No border on slider
    troughborderwidth=0,  # No trough border
)
style.map(
    "Vertical.TScale",
    background=[("active", "#00d4d4")],  # Cyan for active slider
)

# Custom style for labels
style.configure(
    "Mobile.TLabel",
    foreground="#000000",  # Changed to black
    font=("Helvetica", 14)
)

# Main frame
main_frame = ttk.Frame(root, padding=20)
main_frame.pack(fill="both", expand=True)

# Brightness display
brightness_label = ttk.Label(main_frame, text="50%", style="Mobile.TLabel")
brightness_label.pack(pady=10)

# Slider (vertical to mimic mobile volume control)
slider = ttk.Scale(
    main_frame,
    from_=100,  # Inverted for vertical (100 at top)
    to=0,
    orient="vertical",  # Changed to vertical
    command=set_brightness,  # Auto-set brightness on scroll
    length=200,  # Taller slider
    style="Vertical.TScale"
)
slider.pack(pady=20)

# Initialize
refresh_value()

# Run application
root.mainloop()
